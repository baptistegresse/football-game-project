// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  sentFriendRequests     Friendship[] @relation("Requester")
  receivedFriendRequests Friendship[] @relation("Addressee")
  notifications Notification[]
  gamePlayers   GamePlayer[]
  wonGames      Game[] @relation("GameWinner")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Friendship {
  id          String   @id @default(uuid())
  requester   User     @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String
  addressee   User     @relation("Addressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  addresseeId String
  status      FriendshipStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([requesterId, addresseeId])
  @@map("friendship")
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Game {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     GameStatus  @default(PENDING)
  players    GamePlayer[]
  winnerId   String?
  winner     User?       @relation("GameWinner", fields: [winnerId], references: [id])
}

model GamePlayer {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  score     Int      @default(0)
  isHost    Boolean  @default(false)
}

enum GameStatus {
  PENDING
  ONGOING
  FINISHED
  CANCELLED
}
